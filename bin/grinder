#!/usr/bin/env ruby

# Development ENV only
$LOAD_PATH.unshift(File.dirname(__FILE__))
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
###

require 'rubygems'
require 'virtualmonkey'
require 'ruby-debug'

usage = <<-EOS
After setting the 'DEPLOYMENT' and 'REST_CONNECTION_LOG' environment variables, run the grinder using:

grinder "testcase.rb" breakpoint_linenum "logfile.log"

DEVELOPERS: Setting the 'MONKEY_DEBUG' environment variable will drop you into ruby-debug at an exception.

Here are your environment variables:
DEPLOYMENT            = #{ENV['DEPLOYMENT']}
REST_CONNECTION_LOG   = #{ENV['REST_CONNECTION_LOG']}
MONKEY_DEBUG          = #{ENV['MONKEY_DEBUG']}
MONKEY_NO_RESUME      = #{ENV['MONKEY_NO_RESUME']}
EOS

raise usage unless ENV['DEPLOYMENT']
raise usage unless ARGV[0].class == "".class
if ARGV[1]
  @breakpoint = ARGV[1].to_i
else
  @breakpoint = 1000000
end
if ARGV[2]
  raise usage unless ARGV[2].class == "".class
  @log = File.open(ARGV[2], "a+")
else
  @log = $stdout
end

@testcase = File.open(ARGV[0], "r")
testname = ARGV[0].split(/\//).last

linenum = 0
@resume = 0

# Should we resume?
test_states = "test_states"
state_dir = File.join(test_states, ENV['DEPLOYMENT'])
if File.directory?(state_dir)
  unless ENV['MONKEY_NO_RESUME']
    @log.syswrite "Resuming previous testcase..."
    @state_file = File.open(File.join(state_dir, testname), "r")
  
    begin
      @resume += 1 if @state_file.readline
    rescue EOFError => e
      done = true
    end while !done
    @state_file.close
  else
    @log.syswrite "Scrapping previous testcase; Starting over..."
    File.delete(File.join(state_dir, testname))
  end
else
  Dir.mkdir(test_states) unless File.directory?(test_states)
  Dir.mkdir(state_dir)
end
@state_file = File.open(File.join(state_dir, testname), "a")

# Grinding
done = false
begin
  line = @testcase.readline
  if line =~ /=/ or (@resume < linenum and linenum <= @breakpoint)
    @log.syswrite(line) unless line =~ /^[ \t]*#/ or line =~ /^[ \t]*$/
    eval(line)
    @state_file.syswrite(line) unless @resume > 0 and line =~ /=/
  end
  if linenum > @breakpoint
    @log.syswrite "Pausing for breakpoint (line #{@breakpoint})"
    @log.close
    done = true
  else
    linenum += 1
  end
rescue EOFError => e
  @state_file.close
  @log.close
  File.delete(File.join(state_dir, testname))
  Dir.rmdir(state_dir)
  done = true
end while !done
